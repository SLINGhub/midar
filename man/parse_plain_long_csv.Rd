% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-import.R
\name{parse_plain_long_csv}
\alias{parse_plain_long_csv}
\title{Parses a plain long CSV file}
\usage{
parse_plain_long_csv(
  path,
  na_strings = "NA",
  silent = FALSE,
  column_mapping = NULL,
  warn_unrecognized_columns = TRUE,
  ...
)
}
\arguments{
\item{path}{File name (*.tsv or *.csv)}

\item{na_strings}{A character vector of strings to be interpreted as NA values.
Blank fields are also considered to be missing values.}

\item{silent}{No comments printed}

\item{column_mapping}{A named character vector with the mapping of the columns in the input file to the columns in the output table.
If NULL (default), the function will use the default mapping. See \code{\link[=import_data_csv_long]{import_data_csv_long()}} for details.}

\item{warn_unrecognized_columns}{Logical indicating whether to issue a warning for unknown columns in the dataset.}

\item{...}{Additional arguments passed to the function. Currently only \code{transition_id_columns}, which is used for
Skyline-like data files. The column mapped to \code{feature_id} will be appended with following info: if  \code{transition_id_columns = "name"}, the function will use the \code{method_precursor_name} and \code{method_product_name} columns to create unique feature IDs.
If \code{transition_id_columns = "mz"}, the function will use the \code{method_precursor_mz} and \code{method_product_mz} columns to create unique feature IDs.}
}
\value{
A tibble in the long format
}
\description{
Parses a CSV table with analysis/samples and feature pairs in rows,
columns representing the feature variables.
}
\examples{

file_path = system.file("extdata", "plain_long_dataset.csv", package = "midar")

tbl <- parse_plain_long_csv(path = file_path)

head(tbl)
}
