% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper.R
\name{order_chained_columns_tbl}
\alias{order_chained_columns_tbl}
\title{Reorder Data Frame based on a chain of linked values in two columns.}
\usage{
order_chained_columns_tbl(
  df,
  from_col,
  to_col,
  include_chain_id,
  disconnected_action = "keep"
)
}
\arguments{
\item{df}{A data frame containing the chain relationships.}

\item{from_col}{A string specifying the column name representing the starting point of the chain.}

\item{to_col}{A string specifying the column name representing the endpoint of the chain.}

\item{include_chain_id}{A logical indicating whether to include a \code{chain_id} column in the output.}

\item{disconnected_action}{A string indicating how to handle fully disconnected rows. Options are:
\describe{
\item{"exclude"}{Exclude disconnected rows from the output.}
\item{"keep"}{Keep disconnected rows in the result.}
}}
}
\value{
A data frame containing ordered chains with a \code{chain_id} column to distinguish between different chains.
If disconnected rows are included, they will have their own \code{chain_id}.
}
\description{
This function orders rows of a data frame based on chained relationships defined by two columns.
It can also handle fully disconnected rows (i.e., rows where both \code{From} and \code{To} values
are not present in other rows). The behavior for disconnected rows is controlled via the
\code{disconnected_action} parameter.
}
\examples{
df <- data.frame(
  From = c("INSPECT", "VERIFY", "START", "NULL", "NEW", "CREATE", "MID", "DIFFERENT", "OUTLIER"),
  To = c("VERIFY", "PUBLISH", "MID", "NEW", "CREATE", "INSPECT", "END", "NOTSAME", "INSIDER"),
stringsAsFactors = FALSE
)

# Order keeping disconnected rows
order_chains_with_disconnected(df, "From", "To")

# Ordr excluding disconnected rows
order_chains_with_disconnected(df, "From", "To", "exclude")

# Throw error if circular dependencies are detected
tryCatch(
  order_chains_with_disconnected(df, "From", "To"),
  error = function(e) message("Error: ", e$message)
)

}
