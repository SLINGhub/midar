% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-import.R
\name{import_data_csv_long}
\alias{import_data_csv_long}
\title{Import Analysis Results from Long Format CSV Files}
\usage{
import_data_csv_long(
  data = NULL,
  path,
  import_metadata = TRUE,
  column_mapping = NULL,
  na_strings = "NA",
  warn_unrecognized_columns = TRUE,
  silent = FALSE
)
}
\arguments{
\item{data}{A \code{MidarExperiment} object to which the imported data will be
added.}

\item{path}{A single file path, multiple file paths, or a directory path. If
a directory is provided, all \verb{*.csv} files within will be imported.}

\item{import_metadata}{Logical indicating whether to import additional
metadata columns (e.g., batch ID, sample type) into the
\code{MidarExperiment} object. Supported metadata column names include
\code{"qc_type"}, \code{"batch_id"}, \code{"is_quantifier"}, \code{"is_istd"}, and
\code{"analysis_order"}.}

\item{column_mapping}{A named character vector mapping internal column names
to CSV column names. Should include keys such as \code{"analysis_id"},
\code{"feature_id"}, and feature variable names. If \code{NULL} (default), the
function attempts automatic detection.}

\item{na_strings}{Character vector of strings to interpret as missing values
(\code{NA}). Blank fields are always treated as missing.}

\item{warn_unrecognized_columns}{Logical indicating whether to issue a
warning when unknown columns are encountered in the dataset.}

\item{silent}{Logical indicating whether to suppress most notifications and
messages.}
}
\value{
A \code{MidarExperiment} object containing the imported data.
}
\description{
This function imports analysis results from CSV files in long table format,
where each row represents a unique observation of a feature-value pair for
an analysis (sample), along with associated feature variables and other
metadata. See "Details" below for more information on using this function.
}
\details{
When no column mapping is provided via the \code{column_mapping} argument, the
function will automatically detect and import columns with the following
names:\tabular{lll}{
   CSV Column Name \tab MiDAR Internal Name \tab Required \cr
   \code{analysis_id} \tab \code{analysis_id} \tab Yes \cr
   \code{feature_id} \tab \code{feature_id} \tab Yes \cr
   \code{qc_type} \tab \code{qc_type} \tab No \cr
   \code{sample_id} \tab \code{sample_id} \tab No \cr
   \code{batch_id} \tab \code{batch_id} \tab No \cr
   \code{istd_feature_id} \tab \code{istd_feature_id} \tab No \cr
   \code{feature_class} \tab \code{feature_class} \tab No \cr
   \code{analyte_id} \tab \code{analyte_id} \tab No \cr
   \code{precursor_mz} \tab \code{method_precursor_mz} \tab No \cr
   \code{product_mz} \tab \code{method_product_mz} \tab No \cr
   \code{area} \tab \code{feature_area} \tab No \cr
   \code{height} \tab \code{feature_height} \tab No \cr
   \code{intensity} \tab \code{feature_intensity} \tab No \cr
   \code{rt} \tab \code{feature_rt} \tab No \cr
   \code{fwhm} \tab \code{feature_fwhm} \tab No \cr
   \code{width} \tab \code{feature_width} \tab No \cr
}


Detection of these columns is case-insensitive. Additionally, if feature
variable columns use the internal naming convention with prefixes
"feature_" or "method_" (e.g. \code{feature_area} instead of \code{area}), the
function will detect and import them automatically.

To import data with different column names, provide a named vector mapping
CSV column names to the internal column names used by \code{MidarExperiment}.
The mapping should be in the format:
\code{c("analysis_id" = "[CSV column name for analysis]", "feature_id" = "[CSV column name for feature]", ...)}, where the right-hand side refers to the
exact column name in the CSV file header. Columns matching internal names
do not require mapping and will be imported automatically. The mapping is
case-insensitive.

Note that the dataset must contain an analysis identifier, either as an
\code{analysis_id} column or via a mapped column.

The function processes all CSV files in the specified directory or the
given file(s), combining them into a single dataset. This supports datasets
split across multiple files during preprocessing. Each feature and raw data
file pair should appear only once to avoid duplication.

The \code{na_strings} parameter allows specifying character strings that should
be interpreted as \code{NA}, ensuring proper handling of missing values.
}
\examples{
file_path <- system.file("extdata", "plain_long_dataset.csv", package = "midar")
mexp <- MidarExperiment()

# Define the column mapping; right side is the CSV column name
col_map <- c(
  "analysis_id" = "raw_data_filename",
  "qc_type" = "qc_type",
  "feature_id" = "feature_id",
  "feature_class" = "feature_class",
  "istd_feature_id" = "istd_feature_id",
  "feature_rt" = "rt",
  "feature_area" = "area"
)

mexp <- import_data_csv_long(
  data = mexp,
  path = file_path,
  column_mapping = col_map,
  import_metadata = TRUE
)

print(mexp)

}
