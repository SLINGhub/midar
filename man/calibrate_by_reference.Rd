% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc-ref-normalization.R
\name{calibrate_by_reference}
\alias{calibrate_by_reference}
\title{Calibrate Features Values Using Reference Sample}
\usage{
calibrate_by_reference(
  data,
  variable,
  reference_sample_id,
  absolute_calibration,
  batch_wise = FALSE,
  summarize_fun = "mean",
  store_conc_ratio = NULL,
  undefined_conc_action = NULL,
  store_normalized = FALSE
)
}
\arguments{
\item{data}{A \code{MidarExperiment} object containing the metabolomics data to be normalized}

\item{variable}{Character string indicating which data type to calibrate Must be
one of: "intensity", "norm_intensity", or "conc"}

\item{reference_sample_id}{Character vector specifying the sample ID(s) to use as
reference(s) or standards}

\item{absolute_calibration}{Logical indicating whether to perform absolute calibration using
known concentrations of the reference sample (TRUE) or relative calibration (FALSE).}

\item{batch_wise}{Logical indicating whether to perform calibration for each batch seperately (TRUE) or for all samples together (FALSE).}

\item{summarize_fun}{Either "mean" or "median". If \code{absolute_calibration = TRUE},
this function is used to summarize the reference sample concentrations across analyses of specified \code{reference_sample_id}. Default is "mean".}

\item{store_conc_ratio}{Logical. Whether to store the ratio of measured
(non-calibrated) compared to the expected (known) concentrations. Only applied if \code{absolute_calibration = TRUE}.
This ratio is stored under the feature variable \code{feature_conc_ratio}. By default it is \code{TRUE} when \verb{variable = 'conc', otherwise }FALSE`.}

\item{undefined_conc_action}{Character string specifying how to handle features
without defined concentrations in reference samples when \code{absolute_calibration = TRUE}.
Must be one of: "original" (keep original values), "na" (set to NA), or "error". Default is "keep".

Default is \code{TRUE}.}

\item{store_normalized}{Logical indicating whether to keep the normalized values in the dataset
when \code{absolute_calibration = TRUE}. Default is FALSE. These values are then stored
as \verb{[VARIABLE]_normalized}, where \verb{[VARIABLE]} is the input variable, e.g., \code{conc}.}
}
\value{
A \code{MidarExperiment} object with calibrated data
}
\description{
This function calibrates feature abundances based on a specified reference sample.
Calibration can be applied to the entire dataset using one or more reference samples,
or batch-wise using reference sample analyses present within each batch.
For both approaches, multiple measurements of the same reference sample are
summarized using either \code{mean} (default) or \code{median} (set by the \code{summarize_fun} argument).
}
\details{
Calibration can be performed in two ways, either absolute, resulting in
concentrations, or relative, resulting in ratios:
\enumerate{
\item Absolute calibration (when \code{absolute_calibration = TRUE})

Calibrates (or re-calibrates) feature abundances based on known concentrations of the corresponding features
defined for a reference sample. The calibrated concentration for a given analyte is calculated as:

\deqn{c_\textrm{cal}^\textrm{Analyte} = \frac{c_\textrm{sample}^\textrm{Analyte}}{c_\textrm{ref}^\textrm{Analyte}} \times c_\textrm{known}^\textrm{Analyte}}

The input variable can either \code{conc}, \code{norm_intensity}, or \verb{intensity, whereas the result will always be stored under the variable}conc` (concentration), in the unit defined
for the feature concentrations in the reference sample.

Metadata requirements:
\itemize{
\item \code{sample_id} and \code{analyte_id} must be defined for the reference sample and features in the analysis and feature metadata, respectively.
\item Known analyte concentrations must be defined in the \verb{QC concentration} metadata for the for the reference sample
\item An error will be raised  if no concentrations are defined for any features
}

Missing analyte concentrations for the reference sample can be handed via \code{undefined_conc_handling} with following options:
\itemize{
\item \code{original}: Keep original feature values, i.e. the non-calibrated values will be returned. \emph{Note}: this is only available when \code{variable = conc}. Use with caution to avoid mixing units.
\item \code{na}: Set affected features values to \code{NA}
\item \code{error} (default): The function stops with error in case of any undefined reference sample feature concentration.
\item In case all feature concentrations are undefined, the function will stop with an error.
}

The re-calibrated feature concentrations are stored as \code{conc}, overwriting existing \code{conc} values.
The original \code{conc} values are stored as \code{conc_beforecal}.

The ratio between the measured and expected (known) concentrations in the
reference sample is available via the feature variable \code{feature_conc_ratio}
and is calculated as follows:

\deqn{c_\textrm{ratio}^\textrm{Analyte} = \frac{c_\textrm{measured}^\textrm{Analyte}}{c_\textrm{expected}^\textrm{Analyte}}}

where \eqn{c_\textrm{measured}} is the measured (non-calibrated) concentration, and
\eqn{c_\textrm{expected}} is the known or reference concentration for the same analyte.
A bias value of 1 indicates perfect agreement; values above or below 1 indicate over- or underestimation.

To export the calibrated concentrations use \code{save_dataset_csv()} with \verb{variable = "conc", or to export non-calibrated values with }variable = "conc_beforecal"\verb{. When saving the MiDAR XLSX report, the calibrated concentrations will also be stored as }conc`.
\item Normalization (relative calibration, \code{absolute_calibration = FALSE})

Normalizes features abundances with corresponding feature abundances in a reference sample,
resulting in ratios. Any available feature abundance variable
(i.e., \code{conc}, \code{norm_intensity}, or \code{intensity}) can be used as input. The normalization is calculate for all present features.
The resulting output will be stored as \verb{[VARIABLE]_normalized}, whereby \verb{[VARIABLE]} is the input variable, e.g., \code{conc_normalized}.

To export the normalized abundances , use \code{save_dataset_csv()} with \code{variable = "[VARIABLE]_normalized"}
For MiDAR XLSX report, use \code{save_report_xlsx()} with same variable setting as for \code{save_dataset_csv()} to
When saving the MiDAR XLSX report via \code{save_report_xlsx()}, availble unfiltered normalized feature abundances
will be included by default. To include filtered normalized feature abundances, set \code{filtered_variable = "[VARIABLE]_normalized"}.
}
}
\seealso{
\code{\link[=normalize_by_istd]{normalize_by_istd()}}, \code{\link[=quantify_by_istd]{quantify_by_istd()}}, \code{\link[=quantify_by_calibration]{quantify_by_calibration()}}
}
